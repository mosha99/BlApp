@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http
@using BlApp.Shared;
@using BlApp.Client.Pages;
@using System.Collections.Generic;
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@*@implements IAsyncDisposable*@
@inject HttpClient Http
@inject IJSRuntime JS;

@if (!login)
{<Loginer isLogin="(b) => log((bool)b)" Itoken="(a) => Tk((string)a)"></Loginer> }
else
{
    if (New)
    {
        <div id="addchat">
            <div class="bg-white col-6 p-3" style="border-radius: 12px;">
                <select class="custom-select mr-3" @bind="newCH">
                    <option value="" selected="">انتخاب كاربر</option>
                    @foreach (var item in users)
                    {
                        <option value="@item.id">@item.name</option>
                    }
                </select>
                <button class="btn btn-primary btn-block mt-4" type="button" @onclick="newchat2">add</button>
                <button class="btn btn-danger btn-block mt-4" type="button" @onclick="close">cancel</button>
            </div>
        </div>
    }
    <div id="wrapper">
        <nav class="navbar navbar-dark align-items-start sidebar sidebar-dark accordion bg-gradient-primary p-0" id="navu">
            <div class="container-fluid d-flex flex-column p-0">
                <a class="navbar-brand d-flex justify-content-center align-items-center sidebar-brand m-0" href="#">
                    <div class="sidebar-brand-icon rotate-n-15"><i class="fas fa-laugh-wink"></i></div>
                    <div class="sidebar-brand-text mx-3"><span>messager</span></div>
                </a>
                <hr class="sidebar-divider my-0">
                <ul class="navbar-nav text-light" id="accordionSidebar">
                    <li class="nav-item"><a class="nav-link" href="profile.html"><i class="fas fa-user"></i><span>Profile</span></a></li>
                </ul>
                <ul class="navbar-nav text-light" id="accordionSidebar">
                    <li class="nav-item"><a class="nav-link" @onclick="newchat"><i class="fas fa-plus"></i><span>add chats</span></a></li>
                    @foreach (var item in names)
                    {
                        <li class="nav-item">
                            <a @onclick="() => select(item.name)">
                                <a class="nav-link" style="cursor:pointer" @onclick="() => select(item.name)">
                                    @if (item.unSeenCount != 0)
                                    {<span class="badge badge-danger badge-counter">@item.unSeenCount</span>}<i class="fas fa-user"></i><span>@item.name</span>
                                </a>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </nav>
        <div class="d-flex flex-column" id="content-wrapper" style="/*overflow-y:hidden;*/">
            <div id="content">
                <nav class="navbar navbar-light navbar-expand bg-white shadow topbar static-top">
                    <div class="container-fluid">
                        <button class="btn btn-link d-md-none rounded-circle mr-3" id="sidebarToggleTop" type="button" @onclick="Hide"><i class="fas fa-bars"></i></button>
                        <form class="form-inline d-none d-sm-inline-block mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
                            <div class="input-group">
                                <span>@selectedChat</span>
                            </div>
                        </form>
                        <ul class="navbar-nav flex-nowrap ml-auto">
                            <li class="nav-item dropdown d-sm-none no-arrow">
                                @*<a class="dropdown-toggle nav-link" aria-expanded="false" data-toggle="dropdown" href="#"><i class="fas fa-search"></i></a>
                                <div class="dropdown-menu dropdown-menu-right p-3 animated--grow-in" aria-labelledby="searchDropdown">
                                    <form class="form-inline mr-auto navbar-search w-100">
                                        <div class="input-group">
                                            <input class="bg-light form-control border-0 small" type="text" placeholder="Search for ...">
                                            <div class="input-group-append"><button class="btn btn-primary py-0" type="button"><i class="fas fa-search"></i></button></div>
                                        </div>
                                    </form>
                                </div>
                            </li>
                            <li class="nav-item dropdown no-arrow mx-1">
                                <div class="nav-item dropdown no-arrow">
                                    <a class="dropdown-toggle nav-link" aria-expanded="false" data-toggle="dropdown" href="#"><span class="badge badge-danger badge-counter">3+</span><i class="fas fa-bell fa-fw"></i></a>
                                    <div class="dropdown-menu dropdown-menu-right dropdown-list animated--grow-in">
                                        <h6 class="dropdown-header">alerts center</h6><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="mr-3">
                                                <div class="bg-primary icon-circle"><i class="fas fa-file-alt text-white"></i></div>
                                            </div>
                                            <div>
                                                <span class="small text-gray-500">December 12, 2019</span>
                                                <p>A new monthly report is ready to download!</p>
                                            </div>
                                        </a><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="mr-3">
                                                <div class="bg-success icon-circle"><i class="fas fa-donate text-white"></i></div>
                                            </div>
                                            <div>
                                                <span class="small text-gray-500">December 7, 2019</span>
                                                <p>$290.29 has been deposited into your account!</p>
                                            </div>
                                        </a><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="mr-3">
                                                <div class="bg-warning icon-circle"><i class="fas fa-exclamation-triangle text-white"></i></div>
                                            </div>
                                            <div>
                                                <span class="small text-gray-500">December 2, 2019</span>
                                                <p>Spending Alert: We've noticed unusually high spending for your account.</p>
                                            </div>
                                        </a><a class="dropdown-item text-center small text-gray-500" href="#">Show All Alerts</a>
                                    </div>
                                </div>
                            </li>
                            <li class="nav-item dropdown no-arrow mx-1">
                                <div class="nav-item dropdown no-arrow">
                                    <a class="dropdown-toggle nav-link" aria-expanded="false" data-toggle="dropdown" href="#"><span class="badge badge-danger badge-counter">7</span><i class="fas fa-envelope fa-fw"></i></a>
                                    <div class="dropdown-menu dropdown-menu-right dropdown-list animated--grow-in">
                                        <h6 class="dropdown-header">alerts center</h6><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="dropdown-list-image mr-3">
                                                <img class="rounded-circle" src="assets/img/avatars/avatar4.jpeg">
                                                <div class="bg-success status-indicator"></div>
                                            </div>
                                            <div class="font-weight-bold">
                                                <div class="text-truncate"><span>Hi there! I am wondering if you can help me with a problem I've been having.</span></div>
                                                <p class="small text-gray-500 mb-0">Emily Fowler - 58m</p>
                                            </div>
                                        </a><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="dropdown-list-image mr-3">
                                                <img class="rounded-circle" src="assets/img/avatars/avatar2.jpeg">
                                                <div class="status-indicator"></div>
                                            </div>
                                            <div class="font-weight-bold">
                                                <div class="text-truncate"><span>I have the photos that you ordered last month!</span></div>
                                                <p class="small text-gray-500 mb-0">Jae Chun - 1d</p>
                                            </div>
                                        </a><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="dropdown-list-image mr-3">
                                                <img class="rounded-circle" src="assets/img/avatars/avatar3.jpeg">
                                                <div class="bg-warning status-indicator"></div>
                                            </div>
                                            <div class="font-weight-bold">
                                                <div class="text-truncate"><span>Last month's report looks great, I am very happy with the progress so far, keep up the good work!</span></div>
                                                <p class="small text-gray-500 mb-0">Morgan Alvarez - 2d</p>
                                            </div>
                                        </a><a class="dropdown-item d-flex align-items-center" href="#">
                                            <div class="dropdown-list-image mr-3">
                                                <img class="rounded-circle" src="assets/img/avatars/avatar5.jpeg">
                                                <div class="bg-success status-indicator"></div>
                                            </div>
                                            <div class="font-weight-bold">
                                                <div class="text-truncate"><span>Am I a good boy? The reason I ask is because someone told me that people say this to all dogs, even if they aren't good...</span></div>
                                                <p class="small text-gray-500 mb-0">Chicken the Dog · 2w</p>
                                            </div>
                                        </a><a class="dropdown-item text-center small text-gray-500" href="#">Show All Alerts</a>
                                    </div>
                                </div>
                                <div class="shadow dropdown-list dropdown-menu dropdown-menu-right" aria-labelledby="alertsDropdown"></div>
                            </li>
                            <div class="d-none d-sm-block topbar-divider"></div>
                            <li class="nav-item dropdown no-arrow">
                                <div class="nav-item dropdown no-arrow">
                                    <a class="dropdown-toggle nav-link" aria-expanded="false" data-toggle="dropdown" href="#"><span class="d-none d-lg-inline mr-2 text-gray-600 small">Valerie Luna</span><img class="border rounded-circle img-profile" src="assets/img/avatars/avatar1.jpeg"></a>
                                    <div class="dropdown-menu shadow dropdown-menu-right animated--grow-in">
                                        <a class="dropdown-item" href="#"><i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Profile</a><a class="dropdown-item" href="#"><i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Settings</a><a class="dropdown-item" href="#"><i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Activity log</a>
                                        <div class="dropdown-divider"></div><a class="dropdown-item" href="#"><i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Logout</a>
                                    </div>
                                </div>*@
                            </li>
                        </ul>
                    </div>
                </nav>
                <div class="container-fluid visible" id="general" style="scroll-behavior: auto;">
                    @if (selectedChat != null)
                    {
                        <Messager messags="selectedmessags"></Messager>
                    }
                </div>
            </div>
            <footer class="bg-white sticky-footer" style="display: flex;padding: 8px 0;flex-shrink: 0; padding-left: 10px;">
                @if (selectedChat != null)
                {
                    <button class="btn btn-primary" type="button" @onclick="send">Button</button>
                    <input type="text" class="form-control col-6" @bind="textbox" @bind:event="oninput">
                }
            </footer>

        </div><a class="border rounded d-inline scroll-to-top" href="#page-top"><i class="fas fa-angle-up"></i></a>
    </div>
}

@code {

    private HubConnection hubConnection;
    private bool login;
    private string token;
    private string _id;
    private string su;
    private List<messageL> messags;
    private List<chats> names;
    private List<string> outM;
    private List<string> inM;
    private string selectedChat;
    private int selectedChatID;
    private List<messageL> selectedmessags;
    private bool New;
    private string textbox;
    private List<user> users ;
    private string newCH;
    private List<string> newadd;
    private bool hide;
    protected override async Task OnInitializedAsync()
    {
        newadd= new List<string>();
        users = new List<user>();
        messags = new List<messageL>();
        selectedmessags = new List<messageL>();
        names = new List<chats>();
        outM = new List<string>();
        inM = new List<string>();
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();
        System.Collections.Generic.List<string> message;

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            Console.WriteLine(message);

            messageL _message = JsonConvert.DeserializeObject<messageL>(message);

            messags.Add(_message);

            chats us = names.FirstOrDefault(x => x.name == _message.name);
            Console.WriteLine(_message.name);

            if (us == null && _message.tname == "me")
            {
                Console.WriteLine(_message.name);

                names.Add(new chats { name = _message.name, unSeenCount = 0 ,id = _message.id});

            }
            else if (!_message.seen && _message.tname == "me")
            {

                names.FirstOrDefault(x => x.name == us.name).unSeenCount++;
            }
            else if( _message.tname != "me")
            {

                var x =messags.FirstOrDefault(x => x.name == _message.tname);
                if (x == null)
                {
                    var z =names.FirstOrDefault(s => s.name == _message.tname);
                    if(z==null) names.Add(new chats { name = _message.tname, unSeenCount = 0, id = _message.id });

                }

                Console.WriteLine("ho");

            }

            if (selectedChat != null)
            {
                select(selectedChat);

            }
            StateHasChanged();

        });

        hubConnection.On<string>("success", (message) =>
        {
            su = message;
            Console.WriteLine(message);
            StateHasChanged();
        });
        hubConnection.On<string>("getuser", (message) =>
        {
            Console.WriteLine(message);

            user _message = JsonConvert.DeserializeObject<user>(message);

            chats us = names.FirstOrDefault(x => x.id == _message.id);
            if (us == null)
            {
                users.Add(_message);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();

        _id = hubConnection.ConnectionId;

        token = await JS.InvokeAsync<string>("getCookie", "token");
        Console.WriteLine($"token : {token}");
        if (token != null)
        {
            log(true);
            login = true;
        }
    }
    public async void log(bool lg)
    {
        if (!login)
        {
            string ktoken = await JS.InvokeAsync<string>("getCookie", "token");
            Console.WriteLine(hubConnection.ConnectionId);
            await hubConnection.SendAsync("start", token);
            login = lg;
        }

    }
    public void Tk(string t)
    {
        token = t;
    }

    public async void select(string name)
    {
        selectedChat = name;
        var z = newadd.Where(x => x == name);
        Console.WriteLine(z != null);
        if (z!=null)
        {
            Console.WriteLine("new");
            selectedChatID = names.FirstOrDefault(z => z.name == name).id;
            selectedmessags = new List<messageL>();
            selectedmessags = messags.Where(x => x.name == name)?.ToList();
            if(messags.Where(x => x.tname == name)!=null) selectedmessags.AddRange(messags.Where(x => x.tname == name));
            selectedmessags = selectedmessags.OrderBy(x => x.date)?.ToList();
            Console.WriteLine("Enew");
        }
        else
        {
            Console.WriteLine("old");
            selectedmessags = messags.Where(x => x.name == name).ToList();
            names.FirstOrDefault(x => x.name == name).unSeenCount = 0;
            selectedChatID = selectedmessags.First().id;
            selectedmessags.AddRange(messags.Where(x => x.tname == name));
            selectedmessags = selectedmessags.OrderBy(x => x.date)?.ToList();

            foreach (var item in selectedmessags)
            {
                if (item.seen == false)
                {
                    await hubConnection.SendAsync("seen", item.Mid);

                }
            }
        }


        Console.WriteLine($"{selectedChatID} is now selected");

    }

    public async void send()
    {
        if (!string.IsNullOrWhiteSpace(textbox) && selectedChatID != null)
        {
            await hubConnection.SendAsync("SendMessage", textbox, selectedChatID);
            textbox = null;
        }
    }

    public async void newchat()
    {
        New = true;
        await hubConnection.SendAsync("getall");

    }

    public async void newchat2()
    {
        if (newCH != null)
        {
            New = false;

            var us = users.FirstOrDefault(x => x.id == int.Parse(newCH));
            var us2 = names.FirstOrDefault(x => x.id == int.Parse(newCH));

            if (us2 == null)
            {
                chats x8 = new chats ();
                x8.id = us.id;
                x8.name = us.name;
                x8.unSeenCount = 0;
                names.Add(x8);
                newadd.Add(us.name);
            }
            users = new List<user>();
        }
    }

    public async void close()
    {
        New = false;
    }
    public async void Hide()
    {
        if (hide)
        {
            await JS.InvokeAsync<string>("show");
            hide = false;
        }
        else
        {
            await JS.InvokeAsync<string>("hide");
            hide = true;
        }
    }

}
